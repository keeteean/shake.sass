/**
 ******************************************************************************
 *** GRID OBJECT ***
 ******************************************************************************
 *
 * The Grid Object is responsible for building a smart, flexible and responsive
 * grid. However you can achieve this only by Sass mixins, so basically you
 * won't need css classes for that, but here in Grid Object the base grid mixins
 * has already been included from Grid Tool.
 *
 * @author Krisztian Pinter <krisz@keeteean.com>
 *
 * Use it when you need to use object elements for layout purposes instead of
 * `@include` grid mixins on semantic elements. There is a `.o-grid` class for
 * the flexbox based grid element (mostly the row layout element) and it's
 * direct child: `.o-grid__item` (mostly the column layout elements).
 * These elements only contains the base, you still have to write in Sass
 * the other rules, like `flex-direction` or item sizes.
 *
 * @example
 *   <div class="o-grid">
 *     <div class="o-grid__item">
 *       Column
 *     </div>
 *
 *     <div class="o-grid__item">
 *       Column
 *     </div>
 *   </div>
 *
 *   .o-grid {
 *     flex-direction: row;
 *   }
 *
 *   .o-grid__item {
 *     @include breakpoint(medium) {
 *       @include column-size(6/12);
 *     }

 *     @include breakpoint(large) {
 *       @include column-size(4/12);
 *     }

 *     &--double {
 *       @include breakpoint(medium) {
 *         @include column-size(6/12);
 *       }

 *       @include breakpoint(large) {
 *         @include column-size(8/12);
 *       }
 *     }
 *   }
 */


/**
 * Imports
 */

@use "../settings";


/**
 * Settings
 *
 * If you want to use from Sass only, all settings found in Grid Tool:
 * @see 2.tools/_tools.grid.scss
 */

/**
 * Namespace settings
 */

$_grid-class          : "o-grid" !default;
$_grid-class-mod      : $_grid-class + "--" !default;


/**
 * Additional grid gutters
 *
 * If you use additionally Container object with custom gutters
 * you have to set custom those custom gutters for Grid object too!
 *
 * You can use a nested map in case you would like to specify responsive gutter
 * sizes.
 *
 * Each gutter size will be available as a BEM modifier that will be named
 * according to the gutter name.
 *
 * Example if `$_grid-gutter-extra: (large: 30px);`
 * then `.o-grid--large` will be available for use.
 *
 * @type Map
 *
 * @example
 *   $_grid-gutter-extra: (
 *     large: (
 *       null : 2rem,
 *       small: 4rem
 *     )
 *   );
 *
 *   <div class"o-grid--large">
 *     <div class="o-grid--large__item">
 *       Column
 *     </div>
 *
 *     <div class="o-grid--large__item">
 *       Column
 *     </div>
 *   </div>
 */

$_grid-gutter-extra    : settings.$grid-gutter-extra !default;


/**
 * Grid Object
 */

// Default Grid Object
.#{$_grid-class} {
  @include grid.make-grid;

  & > &__item {
    @include grid.make-column;
  }
}

// Grid Object Extra Gutters
@each $gutter-name, $gutter-size in $_grid-gutter-extra {
  .#{$_grid-class-mod + quote($gutter-name)} {
    @include grid.make-grid($gutter-size);

    & > &__item {
      @include grid.make-column($gutter-size);
    }
  }
}

