/**
 ******************************************************************************
 *** THE MAIN SASS FILE ***
 ******************************************************************************
 *
 * Here we can import and organize all sass files what need all pages.
 *
 */

/**
 * Settings
 *
 * Setting files contain **global** configurations that are shared by more than
 * one modules.
 * Local configurations should be contained into the modules (objects,
 * components, etc.) that are related to.
 */
@use "settings";

/**
 * Tools
 *
 * Globally used mixins and functions.
 * It’s important not to output any CSS in the first 2 layers.
 */
@use "tools";

/**
 * Base
 *
 * Base styles are the default styles of base elements. It's a combination of
 * ITCSS's Generic and Elements layers.
 *
 * A Base rule is applied to an element using an element selector, a descendant
 * selector, or a child selector, along with any pseudo-classes. It doesn’t
 * include any class or ID selectors. Base styles are related to the basic
 * styles of an application, like Typography, Reset and styling of global
 * elements.
 *
 * This is the first layer which generates actual CSS.
 */
@use "3.base/base.reset" as b-reset;
@use "3.base/base.page" as b-page;
@use "3.base/base.type" as b-type;

/**
 * Objects
 *
 * Class-based selectors which define undecorated design patterns,
 * for example media object known from OOCSS. They provide structure to your
 * content, do not contain any cosmetic CSS and they should never been directly
 * overwritten.
 * This is the first layer in which we find class-based selectors. These are
 * concerned with styling non-cosmetic design patterns, or 'objects'. Objects
 * can range from something as simple as a .wrapper element, to layout systems,
 * through to things.
 */
@use "4.objects/objects.container" as o-container;
@use "4.objects/objects.grid" as o-grid;
@use "4.objects/objects.media" as o-media;

/**
 * Components
 *
 * Specific UI components.
 * This is where majority of our work takes place and our UI components are
 * often composed of Objects and Components.
 * They contain cosmetic CSS and they can be directly overwritten to fit your
 * UI Kit style.
 */
@use "5.components/components.icon" as c-icon;
@use "5.components/components.page" as c-page;
@use "5.components/components.table" as c-table;

/**
 * Utilities
 *
 * Utilities and helper classes with ability to override anything which goes
 * before in the triangle, ex. hide helper class.
 * They are usually one line of code and have an `!important` rule to make
 * sure they override all element styles when used and not be overridden from
 * other sources.
 */
@use "6.utilities/utilities.clearfix" as u-clearfix;
@use "6.utilities/utilities.full-width-image" as u-full-width-image;
@use "6.utilities/utilities.stretched-link" as u-stretched-link;
@use "6.utilities/utilities.text" as u-text;
@use "6.utilities/utilities.video" as u-video;
@use "6.utilities/utilities.visibility" as u-visibility;
