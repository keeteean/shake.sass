/**
 ******************************************************************************
 *** GRID TOOL ***
 ******************************************************************************
 *
 * The Grid Tool is responsible for building a smart, flexible and responsive
 * grid. However you can achieve this only by Sass mixins, so you won't need
 * css classes for that, but there is in Grid Object where the base grid mixins
 * has already been included from here.
 *
 * based on iota.css with some Bootstrap 4 flavour
 * @author Dimitris Psaropoulos <info@harby.me>
 * @author Krisztian Pinter <krisz@keeteean.com>
 *
 * We use Flexbox to create grid, so we don't generate too much css here, only
 * the essential ones. Then you can extend (not @extend) that more properties
 * as you need, like: `flex-direction`, `justify-content` or vertical spacing.
 *
 * Let's see a semantic example for a typical responsive entry lister:
 *
 * @example
 *   <div class="o-container">
 *     <ul class="entry__list">
 *       <li class="entry">an entry</li>
 *       <li class="entry">an entry</li>
 *       <li class="entry">an entry</li>
 *       <li class="entry entry--double">an entry</li>
 *       <li class="entry">an entry</li>
 *     </ul>
 *   </div>
 *
 *   .entry__list {
 *     @include make-grid();
 *     flex-direction: row;
 *   }
 *
 *   .entry {
 *     @include make-column();
 *     @include breakpoint(medium) {
 *       @include column-size(6/12);
 *     }

 *     @include breakpoint(large) {
 *       @include column-size(4/12);
 *     }

 *     &--double {
 *       @include breakpoint(medium) {
 *         @include column-size(6/12);
 *       }

 *       @include breakpoint(large) {
 *         @include column-size(8/12);
 *       }
 *     }
 *   }
 */

@use "sass:math";


/**
 * Settings
 *
 * We use the default global gutters for gaps between columns. But you can
 * define additional gutters. There is an empty `$tools-grid-gutter-extra`
 * Sass map for that, but if you need, you can create more.
 */

$tools-grid-gutter-default     : $global-gutter-default;
$tools-grid-gutter-extra       : $global-grid-gutter-extra;


/**
 * Create Grid
 *
 * With `make-grid` mixin you can create grid element from the parent of
 * columns element. In the most cases this will be the row element.
 * It has one parameter: the gutter size. By default this is the global
 * gutter. But you can add any value. In this way, if you don't want any
 * gutter, just type 0.
 *
 * @type Mixin
 * @parameter {map | number} $gutter - The gutter size between columns: with
 * the last `half` parameter this value will be divide by 2!
 * @require {mixin} _generate-unit <2.tools/libraries/generate-unit>
 * @require {mixin} _negative-unit <2.tools/libraries/negative-unit>
 *
 *
 * Examples
 *
 * Grid with default gutter
 *
 * The default gutter comes from `1.settings/_settings.grid.scss` and here
 * we divide that by 2 for two sides.
 *
 * @example
 *   .entry__list {
 *     @include make-grid();
 *   }
 *
 * Grid with custom responsive gutters
 *
 * @example
 *   $tools-grid-gutter-extra: (
 *       null    : .6rem,
 *       medium  : 1.2rem,
 *       large   : 2.4rem
 *   );
 *
 *   .entry__list {
 *     @include make-grid($tools-grid-gutter-extra);
 *   }
 *
 * Grid with simple, non responsive gutters
 *
 * @example
 *   .entry__list {
 *     @include make-grid(1.5rem);
 *   }
 *
 * Grid without any gutters (collapsed)
 *
 * @example
 *   .entry__list {
 *     @include make-grid(0);
 *   }
 */

@mixin make-grid($gutter: $tools-grid-gutter-default) {
  @include _generate-unit("margin", "left", _negative-unit($gutter), half);
  @include _generate-unit("margin", "right", _negative-unit($gutter), half);

  display: flex;
  flex-wrap: wrap;
  list-style: none;
  box-sizing: border-box;
}


/**
 * Create Columns for Grid
 *
 * In the similar way to Grid with `make-column` mixin you can create
 * columns.
 * It has one parameter: the gutter size. By default this is the global
 * gutter. But you can add any value. In this way, if you don't want any
 * gutter, just type 0. You have to you use the same value for gid and
 * column!
 *
 * @type Mixin
 * @parameter {map | number} $gutter - The gutter size between columns: with
 * the last `half` parameter this value will be divide by 2!
 * @require {mixin} _generate-unit <2.tools/libraries/generate-unit>
 *
 *
 * Examples
 *
 * Columns with default gutter
 *
 * @example
 *   .entry {
 *     @include make-column();
 *   }
 *
 * Columns with custom responsive gutters
 *
 * @example
 *   $tools-grid-gutter-extra: (
 *       null    : .6rem,
 *       medium  : 1.2rem,
 *       large   : 2.4rem
 *   );
 *
 *   .entry {
 *     @include make-column($tools-grid-gutter-extra);
 *   }
 *
 * Columns with simple, non responsive gutters
 *
 * @example
 *   .entry {
 *     @include make-column(1.5rem);
 *   }
 *
 * Columns without any gutters (collapsed)
 *
 * @example
 *   .entry {
 *     @include make-column(0);
 *   }
 */

@mixin make-column($gutter: $tools-grid-gutter-default) {
  @include _generate-unit("padding", "left", $gutter, half);
  @include _generate-unit("padding", "right", $gutter, half);

  box-sizing: inherit;
  flex-basis: auto;
  width: 100%;
  min-width: 0;
}


/**
 * Set Column size
 *
 * Use the `column-size` mixin to set the size of columns. We use dedicated
 * mixin for this, so you can set individually for each columns and different
 * breakpoints.
 * It accept two parameter: the column size and the total number of the columns.
 * Actually it's a fraction, like: `4, 12` -> `4/12`; this means: four columns
 * of total twelve. (you will get 33.3333%).
 *
 * @type Mixin
 * @parameter {number} $column - like 4.
 * @parameter {number} $columns - like 12.
 * @require {function} _calc-column-size
 *
 *
 * @example
 *   .entry {
 *     @include make-column();
 *     @include column-size(4,12);
 *   }
 */

@mixin column-size($column, $all-columns) {
  flex: 0 0 percentage(math.div($column, $all-columns));
  max-width: percentage(math.div($column, $all-columns));
}


/**
 * Column offset
 *
 * Use the `column-offset` mixin if you want to push or pull a column.
 * In normal way you can do this easily with custom left or right margins,
 * but if you want one or more column sized gap between columns, you can do
 * it easily with this mixin.
 * It has two required parameters to calculate the offset size: the column size
 * and the total number of the columns.
 * There is an optionally third parameter too: the position (before (`start`)
 * or after (`end`) of the column). By default before (`start`).
 *
 * @type Mixin
 * @parameter {number} $column - like 4.
 * @parameter {number} $columns - like 12.
 * @parameter {string} $position - start or end.
 * @require {function} _calc-column-size
 *
 *
 * Examples
 *
 * Push the column on left side
 *
 * @example
 *   .entry {
 *     @include make-column();
 *     @include column-size(3,12);
 *
 *     &--center {
 *       @include column-offset(3,12);
 *     }
 *   }
 *
 * Pull the column on right side
 *
 * @example
 *   .article__column--center {
 *     @include make-column();
 *     @include column-size(3,12);
 *     @include column-offset(3,12, end);
 *   }
 */

@mixin column-offset($column, $all-columns, $position: start) {
  @if ($position == start) {
    margin-left: percentage(math.div($column, $all-columns));
  }

  @else if($position == end) {
    margin-right: percentage(math.div($column, $all-columns));
  }
}
