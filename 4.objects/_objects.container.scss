/**
 ******************************************************************************
 *** CONTAINER OBJECT ***
 ******************************************************************************
 *
 * The container object is responsible for creating smart, flexible and
 * responsive containers.
 *
 * For default container you can use the `make-container` mixin from
 * `2.tools/_tools.container.scss`. Here we add a css class for that.
 * You can setup here for additional container sizes and paddings.
 *
 * Based on iota.css.
 * @author Dimitris Psaropoulos <info@harby.me>
 * @author Krisztian Pinter <krisz@keeteean.com>
 * @link https://www.iotacss.com/docs/objects/container
 *
 * @require {mixin} make-container <2.tools/_tools.container.scss> - default
 * container
 * @require {mixin} container-padding <2.tools/_tools.container.scss> -
 * container with custom padding
 * @require {mixin} container-size <2.tools/_tools.container.scss> - container
 * with custom size (max-width)
 *
 * Examples
 *
 * Container with extra gutter sizes
 * It will create one container named 'small' with 10px padding and one
 * container named 'large' with 40px padding.
 *
 * @example
 *   $gutter-extra: (
 *     small: 1rem,
 *     large: 4rem
 *   );
 *
 * Container with default responsive gutter
 * It will create a default container with 10px padding in mobile and 20px in
 * tablets and up.
 *
 * @example
 *   $gutter-default: (
 *     null : 1rem,
 *     small: 2rem
 *   );
 *
 * Container with extra responsive gutter size
 * It will create one extra container named 'large' that will have 20px padding
 * in mobile and 40px padding in tablets and up.
 *
 * @example
 *   $gutter-default: (
 *     large: (
 *       null : 2rem,
 *       small: 4rem
 *     )
 *   );
 *
 * Container with responsive size
 * It will create a container that will have max-width of 320px in mobile and
 * max-width of 1024px in tablets and up.
 *
 * @example
 *   $size-default: (
 *     null : 32rem,
 *     small: 102.4rem
 *   );
 */

/**
 * Imports
 */
@use "../settings";
@use "../2.tools/_tools.container" as container;

/**
 * Settings
 */

/**
 * Namespace settings
 */
$class: "o-container" !default;
$class-mod: $class + "--" !default;

/**
 * Additional container gutters
 *
 * Allows you to specify more sets of padding left and right of your container.
 * You can use a nested map in case you would like to specify responsive gutter
 * sizes.
 *
 * Each gutter size will be available as a BEM modifier that will be named
 * according to the gutter name.
 *
 * Example if `$gutter-extra: (large: 30px);`
 * then `.o-container--large` will be available for use.
 *
 * @type Map
 *
 * @example
 *   $gutter-extra: (
 *     large: (
 *       null : 2rem,
 *       small: 4rem
 *     )
 *   );
 *
 *   <div class"o-container--large">...</div>
 */
$gutter-extra: settings.$container-gutter-extra !default;

/**
 * Additional container sizes
 *
 * Allows you to specify more sets of max-width for your container. You can use
 * a nested map in case you would like to specify a responsive size.
 *
 * Each gutter size will be available as a BEM modifier that will be named
 * according to the container size name.
 *
 * Example if `$size-extra: (large: 1600px);`
 * then `.o-container--large` will be available for use.
 *
 * @type Map
 *
 * @example
 *   $size-extra: (
 *     large: (
 *       null : 30rem,
 *       small: 120rem
 *     )
 *   );
 *
 *   <div class"o-container--large">...</div>
 */
$size-extra: settings.$container-size-extra !default;

// Default Container Object
.#{$class} {
  @include container.make-container;
}

// Container Object Extra Gutters
@each $gutter-name, $gutter-size in $gutter-extra {
  .#{$class-mod + quote($gutter-name)} {
    @include container.container-padding($gutter-size);
  }
}

// Container Object Extra Sizes
@each $size-name, $size-value in $size-extra {
  .#{$class-mod + quote($size-name)} {
    @include container.container-size($size-value);

    margin-inline: auto;
  }
}
