/**
 ******************************************************************************
 *** MEDIA OBJECT ***
 ******************************************************************************
 *
 * Media object is responsible for a common design pattern where there is a
 * fixed and a fluid width column next to each other. It's used to build the
 * structure of sidebars, comments, avatar and other similar UI components.
 *
 * based on iota.css
 * @author Dimitris Psaropoulos <info@harby.me>
 * @author Krisztian Pinter <krisz@keeteean.com>
 * @link https://www.iotacss.com/docs/objects/media
 *
 * @require {mixin} generate-unit <../2.tools/libraries/_libraries.generate-unit.scss>
 *
 * Examples
 *
 * Media Object
 *
 * It creates a default media object
 *
 * @example
 *   <div class="o-media">
 *     <div class="o-media__fixed">
 *       Fixed width column
 *     </div>
 *
 *     <div class="o-media__fluid">
 *       Fluid width column
 *     </div>
 *   </div>
 *
 * Media Object with responsive gutter size
 *
 * It creates a default media object with 10px gutter in mobile and 20px in
 * tablets and up.
 *
 * @example
 *   $gutter-default: (
 *     null : 1rem,
 *     small: 2rem
 *   );
 *
 *   <div class="o-media">
 *     <div class="o-media__fixed">
 *       Fixed width column
 *     </div>
 *
 *     <div class="o-media__fluid">
 *       Fluid width column
 *     </div>
 *   </div>
 *
 * Media Object with extra gutter size
 *
 * It creates a new gutter size named 'small' that will have 5px gutter size.
 *
 * @example
 *   $gutter-extra: (
 *     small: .5rem
 *   );
 *
 *   <div class="o-media o-media--small">
 *     <div class="o-media__fixed">
 *       Fixed width column
 *     </div>
 *
 *     <div class="o-media__fluid">
 *       Fluid width column
 *     </div>
 *   </div>
 *
 * Media Object with extra responsive gutter size
 *
 * It creates a new gutter size named 'small' that will have 5px gutter size in
 * mobiles and 10px in tablets and up.
 *
 * @example
 *   $gutter-extra: (
 *     small: (
 *       null : .5rem,
 *       small: 1rem
 *     )
 *   );
 *
 *   <div class="o-media o-media--small">
 *     <div class="o-media__fixed">
 *       Fixed width column
 *     </div>
 *
 *     <div class="o-media__fluid">
 *       Fluid width column
 *     </div>
 *   </div>
 *
 * Media Object that collapses under 767px width breakpoints
 *
 * It creates a media object that will automatically collapse in two rows when a
 * max-width of 767px presents.
 *
 * @example
 * $collapses-at: 767px; // This is not needed since 767px is the default
 * value $responsive: true;
 *
 *   <div class="o-media o-media--responsive">
 *     <div class="o-media__fixed">
 *       Fixed width column
 *     </div>
 *
 *     <div class="o-media__fluid">
 *       Fluid width column
 *     </div>
 *   </div>
 *
 * Media object with reversed columns
 *
 * It creates a media object that has the fixed part on the right and the fluid on
 * the left.
 *
 * @example
 *   $reversed: true;
 *
 *   <div class="o-media o-media--reversed">
 *     <div class="o-media__fixed">
 *       Fixed width column on the right
 *     </div>
 *
 *     <div class="o-media__fluid">
 *       Fluid width column on the left
 *     </div>
 *   </div>
 */

/**
  * Imports
 */
@use "../2.tools/libraries";
@use "../settings";

/**
 * Settings
 */

/**
 * Namespace classes
 *
 * @type String
 */
$fixed: "fixed" !default;
$fluid: "fluid" !default;
$reversed: "reversed" !default;
$align-middle: "middle" !default;
$align-bottom: "bottom" !default;
$responsive: "responsive" !default;
$class-media: "o-media" !default;
$class-media-mod: $class-media + "--" !default;
$class-media-fixed: $class-media + "__" + $fixed !default;
$class-media-fluid: $class-media + "__" + $fluid !default;

/**
 * Default gutter size
 *
 * Use a number for a single size or a map for a responsive size.
 *
 * @type Number | Map
 */
$gutter-default: settings.$gutter-default !default;

/**
 * Extra gutters map
 *
 * Each gutter size will be available as a modifier that will be named according
 * to the gutter name.
 *
 * Use a map for a single size or a nested map for a responsive size.
 *
 * Example if `$gutter-extra: ("compact": "10px");`
 * then `.o-media--compact` will be available for use.
 *
 * @type Map
 */
$gutter-extra: () !default;

/**
 * Reverse columns order
 *
 * Enable / Disable reversed modifier.
 *
 * .o-media--rev: Reverse columns order
 *
 * @type Boolean
 */
$is-reversed: false !default;

/**
 * Alignment
 *
 * Enable / Disable alignment modifiers.
 *
 * .o-media--middle: Align columns at middle vertically
 * .o-media--bottom: Align columns at bottom vertically.
 *
 * @type Boolean
 */
$is-aligned: false !default;

/**
 * Responsive
 *
 * Enable / Disable responsive modifier for media object.
 *
 * .o-media--responsive: Collapse fluid section bellow fixed one, at a specific
 * max-width breakpoint.
 *
 * @type Boolean
 */
$is-responsive: false !default;

/**
 * Collapsing
 *
 * Specify max-width for breakpoint to collapse at.
 *
 * @type Number
 */
$collapse-at: 47.93em !default; // 767px

/**
 * Flex Media Object
 */
.#{$class-media} {
  display: flex;
  align-items: flex-start;

  & > .#{$class-media-fixed} {
    @include libraries.generate-unit("padding", "inline-end", $gutter-default);
  }

  & > .#{$class-media-fluid} {
    flex: 1;
  }
}

/**
 * Flex Media Object Reversed
 */
@if $is-reversed == true {
  .#{$class-media-mod + $reversed} {
    & > .#{$class-media-fixed} {
      @include libraries.generate-unit("padding", "inline-start", $gutter-default);
      @include libraries.generate-unit("padding", "inline-end", 0);

      order: 1;
    }
  }
}

/**
 * Media Object Aligned
 */
@if $is-aligned == true {
  .#{$class-media-mod + $align-middle} {
    align-items: center;
  }

  .#{$class-media-mod + $align-bottom} {
    align-items: flex-end;
  }
}

/**
 * Responsive Media Object
 */
@if $is-responsive == true {
  @media screen and (max-width: $collapse-at) {
    .#{$class-media-mod + $responsive} {
      display: block;

      & > .#{$class-media-fixed},
      & > .#{$class-media-fluid} {
        display: block;
        inline-size: 100%;
        padding-inline: 0;
      }

      & > .#{$class-media-fixed} {
        @if $is-reversed == true {
          @include libraries.generate-unit("margin", "block-start", $gutter-default);
        } @else {
          @include libraries.generate-unit("margin", "block-end", $gutter-default);
        }
      }
    }
  }
}

/**
 * Media Object Sizes
*/
@each $gutter-name, $gutter-size in $gutter-extra {
  .#{$class-media-mod + $gutter-name} {
    // Media Object Responsive
    @if $is-responsive == true {
      @media screen and (max-width: $collapse-at) {
        &.#{$class-media-mod + $responsive} {
          display: block;

          & > .#{$class-media-fixed} {
            @include libraries.generate-unit("margin", "block-end", $gutter-size);

            padding-inline: 0;
          }
        }
      }
    }

    /**
     * Media Object Reserved
     */
    @if $is-reversed == true {
      // Media Object Reserved with Extra Sizes
      &.#{$class-media-mod + $reversed} {
        @media screen and (min-width: ($collapse-at + 1)) {
          & > .#{$class-media-fixed} {
            @include libraries.generate-unit("padding", "inline-start", $gutter-size);
            @include libraries.generate-unit("padding", "inline-end", 0);
          }
        }
      }

      & > .#{$class-media-fixed} {
        @include libraries.generate-unit("padding", "inline-end", $gutter-size);
      }

      /**
       * Media Object Reserved and Responsive with Extra Sizes
       */
      &.#{$class-media-mod + $reversed + ":not(." + $class-media-mod + $responsive + ")"} {
        @media screen and (max-width: $collapse-at) {
          & > .#{$class-media-fixed} {
            @include libraries.generate-unit("padding", "inline-start", $gutter-size);
            @include libraries.generate-unit("padding", "inline-end", 0);
          }
        }
      }
    }
  }
}
